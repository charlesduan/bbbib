#!/usr/bin/ruby -w

require 'nokogiri'
require 'json'
require 'open-uri'
require 'shellwords'
require 'ostruct'
require 'optparse'
require 'etc'

require 'bbbib'

@commands = case Etc.uname[:sysname]
            when 'Linux' then {
              :copy => 'xclip -selection clipboard -i',
              :paste => 'xclip -selection clipboard -o',
            }
            when 'Darwin' then {
              :copy => 'pbcopy',
              :paste => 'pbpaste',
            }
            else
              puts "Unknown platform #{Etc.uname[:sysname]}; cannot copy/paste"
              {}
            end

@options = OpenStruct.new(
  :htmlfile => nil,
  :showmatches => false,
  :nocopy => false,
  :infile => nil,
  :url => nil,
  :formatter => BBBib::TeXFormatter.new,
)

opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options] [URL]"
  opts.separator("")
  opts.separator("Options:")

  opts.on('-f', '--file FILE', 'HTML file to save') do |f|
    @options.htmlfile = f
  end

  opts.on('-i', '--input FILE', 'HTML file as input') do |f|
    @options.infile = f
  end

  opts.on('-n', '--nocopy', 'Don\'t copy to clipboard') do
    @options.nocopy = true
  end

  opts.on('-p', '--paste', 'Take input URL from pasteboard') do
    @options.url = `#{@commands[:paste]}` if @commands[:paste]
  end

  opts.on('-s', '--show', 'Show matches') do
    @options.showmatches = true
    class BBBib::Finder
      def msg(message)
        STDERR.puts(message)
      end
    end
  end

  opts.on('-f', '--formatter NAME', 'Choose output formatter') do |f|
    formatters = BBBib::Formatter::FORMATTERS.map { |c|
      [ c.name, c ]
    }.to_h
    if formatters.include?(f)
      @options.formatter = formatters[f].new
    else
      raise "Invalid formatter; valid options are #{formatters.keys.join(' ')}"
    end
  end

  opts.on_tail('-h', '--help', 'Show this help') do
    puts opts
    exit
  end

end

opt_parser.parse!(ARGV)

#
# Get the URL
#
if @options.url
elsif !ARGV.empty?
  @options.url = ARGV.join(' ').chomp
else
  puts "Enter a URL:"
  @options.url = STDIN.readline.chomp
end
@options.url.gsub!(/#.*$/, '')
url = URI(BBBib::Source.review_url(@options.url))
doc = file = nil

USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:58.0) ' + \
  'Gecko/20100101 Firefox/58.0'
if @options.infile
  file = open(@options.infile) { |f| f.read }
else
  loop do
    curlargs = "-s -4 -L --compressed " + \
      "--user-agent #{USER_AGENT.shellescape} #{url.to_s.shellescape}"
    file = `curl -k #{curlargs}`
    if file == ''
      file = `curl #{curlargs}`
    end
    doc = Nokogiri::HTML(file)

    # Deal with meta refresh
    refresh = doc.xpath('//meta').map { |meta|
      meta['http-equiv'] && meta['http-equiv'].downcase == 'refresh' && (
        meta['url'] || ( meta['content'] =~ /[\s;,]+url=/ && $' )
      )
    }.compact.first
    break unless refresh
    url += refresh
  end
end

if @options.htmlfile
  open(@options.htmlfile, 'w') do |f|
    f.write(file)
  end
end

source = BBBib::Source.for(doc, url).new(doc, url)

source.collect_params

source.reconfigure_params

res = "\n#{@options.formatter.format(source)}\n"
puts res
unless @options.nocopy
  copy_cmd = @commands[:copy]
  if copy_cmd
    open("|#{copy_cmd}", 'w') do |f|
      f.puts res
    end
    puts "Copied to clipboard."
  end
end

